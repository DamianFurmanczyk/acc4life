import { Observable } from 'rxjs';
import { NgScrollbar } from '../../ng-scrollbar';
import { TrackAdapter } from '../track/track';
import * as ɵngcc0 from '@angular/core';
export declare abstract class ThumbAdapter {
    protected cmp: NgScrollbar;
    protected thumbElement: HTMLElement;
    protected document: any;
    track: TrackAdapter;
    private _dragging;
    dragging: Observable<boolean>;
    protected abstract get pageProperty(): string;
    protected abstract get clientProperty(): string;
    abstract get dragStartOffset(): number;
    abstract get size(): number;
    protected abstract get viewportScrollSize(): number;
    protected abstract get viewportScrollOffset(): number;
    abstract get viewportScrollMax(): number;
    get trackMax(): number;
    get clientRect(): ClientRect;
    get clicked(): Observable<any>;
    protected constructor(cmp: NgScrollbar, thumbElement: HTMLElement, document: any);
    update(): void;
    /**
     * Stream that emits the 'scrollTo' position when a scrollbar thumb element is dragged
     * This function is called by thumb drag event using viewport or scrollbar pointer events
     */
    dragged(event: any): Observable<number>;
    protected abstract setDragging(value: boolean): void;
    protected abstract scrollTo(position: number): void;
    protected abstract updateStyles(position: number, size: number): void;
    protected abstract handleDrag(position: number, scrollMax?: number): number;
    protected abstract handleDirection(position: number, scrollMax?: number): number;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ThumbAdapter, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ThumbAdapter, never, never, { "track": "track"; }, { "dragging": "dragging"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGh1bWIuZC50cyIsInNvdXJjZXMiOlsidGh1bWIuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOZ1Njcm9sbGJhciB9IGZyb20gJy4uLy4uL25nLXNjcm9sbGJhcic7XG5pbXBvcnQgeyBUcmFja0FkYXB0ZXIgfSBmcm9tICcuLi90cmFjay90cmFjayc7XG5leHBvcnQgZGVjbGFyZSBhYnN0cmFjdCBjbGFzcyBUaHVtYkFkYXB0ZXIge1xuICAgIHByb3RlY3RlZCBjbXA6IE5nU2Nyb2xsYmFyO1xuICAgIHByb3RlY3RlZCB0aHVtYkVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuICAgIHByb3RlY3RlZCBkb2N1bWVudDogYW55O1xuICAgIHRyYWNrOiBUcmFja0FkYXB0ZXI7XG4gICAgcHJpdmF0ZSBfZHJhZ2dpbmc7XG4gICAgZHJhZ2dpbmc6IE9ic2VydmFibGU8Ym9vbGVhbj47XG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IGdldCBwYWdlUHJvcGVydHkoKTogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBnZXQgY2xpZW50UHJvcGVydHkoKTogc3RyaW5nO1xuICAgIGFic3RyYWN0IGdldCBkcmFnU3RhcnRPZmZzZXQoKTogbnVtYmVyO1xuICAgIGFic3RyYWN0IGdldCBzaXplKCk6IG51bWJlcjtcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgZ2V0IHZpZXdwb3J0U2Nyb2xsU2l6ZSgpOiBudW1iZXI7XG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IGdldCB2aWV3cG9ydFNjcm9sbE9mZnNldCgpOiBudW1iZXI7XG4gICAgYWJzdHJhY3QgZ2V0IHZpZXdwb3J0U2Nyb2xsTWF4KCk6IG51bWJlcjtcbiAgICBnZXQgdHJhY2tNYXgoKTogbnVtYmVyO1xuICAgIGdldCBjbGllbnRSZWN0KCk6IENsaWVudFJlY3Q7XG4gICAgZ2V0IGNsaWNrZWQoKTogT2JzZXJ2YWJsZTxhbnk+O1xuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3RvcihjbXA6IE5nU2Nyb2xsYmFyLCB0aHVtYkVsZW1lbnQ6IEhUTUxFbGVtZW50LCBkb2N1bWVudDogYW55KTtcbiAgICB1cGRhdGUoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBTdHJlYW0gdGhhdCBlbWl0cyB0aGUgJ3Njcm9sbFRvJyBwb3NpdGlvbiB3aGVuIGEgc2Nyb2xsYmFyIHRodW1iIGVsZW1lbnQgaXMgZHJhZ2dlZFxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGJ5IHRodW1iIGRyYWcgZXZlbnQgdXNpbmcgdmlld3BvcnQgb3Igc2Nyb2xsYmFyIHBvaW50ZXIgZXZlbnRzXG4gICAgICovXG4gICAgZHJhZ2dlZChldmVudDogYW55KTogT2JzZXJ2YWJsZTxudW1iZXI+O1xuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBzZXREcmFnZ2luZyh2YWx1ZTogYm9vbGVhbik6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IHNjcm9sbFRvKHBvc2l0aW9uOiBudW1iZXIpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBhYnN0cmFjdCB1cGRhdGVTdHlsZXMocG9zaXRpb246IG51bWJlciwgc2l6ZTogbnVtYmVyKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgaGFuZGxlRHJhZyhwb3NpdGlvbjogbnVtYmVyLCBzY3JvbGxNYXg/OiBudW1iZXIpOiBudW1iZXI7XG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IGhhbmRsZURpcmVjdGlvbihwb3NpdGlvbjogbnVtYmVyLCBzY3JvbGxNYXg/OiBudW1iZXIpOiBudW1iZXI7XG59XG4iXX0=