import { AfterContentInit, OnDestroy, NgZone, EventEmitter } from '@angular/core';
import { Platform } from '@angular/cdk/platform';
import { Observable } from 'rxjs';
import { NgScrollbar } from '../ng-scrollbar';
/**
 * Factory that initialize the ResizeObserver if available in the browser
 * Otherwise, it lazy-loads the ResizeObserver polyfill
 */
import * as ɵngcc0 from '@angular/core';
export declare class ResizeObserverFactory {
    private readonly resizeObserverSource;
    readonly resizeObserverLoader: Observable<any>;
    constructor(document: any, platform: Platform);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ResizeObserverFactory, never>;
}
export declare class ResizeSensor implements AfterContentInit, OnDestroy {
    private zone;
    private platform;
    private resizeObserverFactory;
    private scrollbar;
    /** Debounce interval for emitting the changes. */
    get debounce(): number;
    set debounce(value: number);
    private _debounce;
    /** Whether ResizeObserver is disabled. */
    get disabled(): any;
    set disabled(value: any);
    private _disabled;
    private _subscription;
    private _resizeObserver;
    resizeSensor: EventEmitter<void>;
    constructor(zone: NgZone, platform: Platform, resizeObserverFactory: ResizeObserverFactory, scrollbar: NgScrollbar);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    private _createObserver;
    private _subscribe;
    private _unsubscribe;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ResizeSensor, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ResizeSensor, "[resizeSensor]", never, { "debounce": "sensorDebounce"; "disabled": "sensorDisabled"; }, { "resizeSensor": "resizeSensor"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplLXNlbnNvci5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsicmVzaXplLXNlbnNvci5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95LCBOZ1pvbmUsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGxhdGZvcm0gfSBmcm9tICdAYW5ndWxhci9jZGsvcGxhdGZvcm0nO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTmdTY3JvbGxiYXIgfSBmcm9tICcuLi9uZy1zY3JvbGxiYXInO1xuLyoqXG4gKiBGYWN0b3J5IHRoYXQgaW5pdGlhbGl6ZSB0aGUgUmVzaXplT2JzZXJ2ZXIgaWYgYXZhaWxhYmxlIGluIHRoZSBicm93c2VyXG4gKiBPdGhlcndpc2UsIGl0IGxhenktbG9hZHMgdGhlIFJlc2l6ZU9ic2VydmVyIHBvbHlmaWxsXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFJlc2l6ZU9ic2VydmVyRmFjdG9yeSB7XG4gICAgcHJpdmF0ZSByZWFkb25seSByZXNpemVPYnNlcnZlclNvdXJjZTtcbiAgICByZWFkb25seSByZXNpemVPYnNlcnZlckxvYWRlcjogT2JzZXJ2YWJsZTxhbnk+O1xuICAgIGNvbnN0cnVjdG9yKGRvY3VtZW50OiBhbnksIHBsYXRmb3JtOiBQbGF0Zm9ybSk7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBSZXNpemVTZW5zb3IgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgem9uZTtcbiAgICBwcml2YXRlIHBsYXRmb3JtO1xuICAgIHByaXZhdGUgcmVzaXplT2JzZXJ2ZXJGYWN0b3J5O1xuICAgIHByaXZhdGUgc2Nyb2xsYmFyO1xuICAgIC8qKiBEZWJvdW5jZSBpbnRlcnZhbCBmb3IgZW1pdHRpbmcgdGhlIGNoYW5nZXMuICovXG4gICAgZ2V0IGRlYm91bmNlKCk6IG51bWJlcjtcbiAgICBzZXQgZGVib3VuY2UodmFsdWU6IG51bWJlcik7XG4gICAgcHJpdmF0ZSBfZGVib3VuY2U7XG4gICAgLyoqIFdoZXRoZXIgUmVzaXplT2JzZXJ2ZXIgaXMgZGlzYWJsZWQuICovXG4gICAgZ2V0IGRpc2FibGVkKCk6IGFueTtcbiAgICBzZXQgZGlzYWJsZWQodmFsdWU6IGFueSk7XG4gICAgcHJpdmF0ZSBfZGlzYWJsZWQ7XG4gICAgcHJpdmF0ZSBfc3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgX3Jlc2l6ZU9ic2VydmVyO1xuICAgIHJlc2l6ZVNlbnNvcjogRXZlbnRFbWl0dGVyPHZvaWQ+O1xuICAgIGNvbnN0cnVjdG9yKHpvbmU6IE5nWm9uZSwgcGxhdGZvcm06IFBsYXRmb3JtLCByZXNpemVPYnNlcnZlckZhY3Rvcnk6IFJlc2l6ZU9ic2VydmVyRmFjdG9yeSwgc2Nyb2xsYmFyOiBOZ1Njcm9sbGJhcik7XG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBwcml2YXRlIF9jcmVhdGVPYnNlcnZlcjtcbiAgICBwcml2YXRlIF9zdWJzY3JpYmU7XG4gICAgcHJpdmF0ZSBfdW5zdWJzY3JpYmU7XG59XG4iXX0=