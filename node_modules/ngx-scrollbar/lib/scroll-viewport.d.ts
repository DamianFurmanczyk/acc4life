import { ElementRef } from '@angular/core';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare class ScrollViewport {
    viewPort: ElementRef;
    private document;
    readonly nativeElement: HTMLElement;
    contentWrapperElement: HTMLElement;
    hovered: Observable<boolean>;
    clicked: Observable<any>;
    get clientHeight(): number;
    get clientWidth(): number;
    get scrollHeight(): number;
    get scrollWidth(): number;
    get scrollTop(): number;
    get scrollLeft(): number;
    get scrollMaxX(): number;
    get scrollMaxY(): number;
    get contentHeight(): number;
    constructor(viewPort: ElementRef, document: any);
    /**
     * Activate viewport pointer events such as 'hovered' and 'clicked' events
     */
    activatePointerEvents(propagate: boolean, destroyed: Observable<void>): void;
    /**
     * Set this directive as a non-functional wrapper, called when a custom viewport is used
     */
    setAsWrapper(): void;
    /**
     * Set this directive as  the viewport, called when no custom viewport is used
     */
    setAsViewport(customClassName: string): void;
    /**
     * Scroll viewport vertically
     */
    scrollYTo(value: number): void;
    /**
     * Scroll viewport horizontally
     */
    scrollXTo(value: number): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ScrollViewport, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ScrollViewport, "[scrollViewport]", never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLXZpZXdwb3J0LmQudHMiLCJzb3VyY2VzIjpbInNjcm9sbC12aWV3cG9ydC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU2Nyb2xsVmlld3BvcnQge1xuICAgIHZpZXdQb3J0OiBFbGVtZW50UmVmO1xuICAgIHByaXZhdGUgZG9jdW1lbnQ7XG4gICAgcmVhZG9ubHkgbmF0aXZlRWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gICAgY29udGVudFdyYXBwZXJFbGVtZW50OiBIVE1MRWxlbWVudDtcbiAgICBob3ZlcmVkOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuICAgIGNsaWNrZWQ6IE9ic2VydmFibGU8YW55PjtcbiAgICBnZXQgY2xpZW50SGVpZ2h0KCk6IG51bWJlcjtcbiAgICBnZXQgY2xpZW50V2lkdGgoKTogbnVtYmVyO1xuICAgIGdldCBzY3JvbGxIZWlnaHQoKTogbnVtYmVyO1xuICAgIGdldCBzY3JvbGxXaWR0aCgpOiBudW1iZXI7XG4gICAgZ2V0IHNjcm9sbFRvcCgpOiBudW1iZXI7XG4gICAgZ2V0IHNjcm9sbExlZnQoKTogbnVtYmVyO1xuICAgIGdldCBzY3JvbGxNYXhYKCk6IG51bWJlcjtcbiAgICBnZXQgc2Nyb2xsTWF4WSgpOiBudW1iZXI7XG4gICAgZ2V0IGNvbnRlbnRIZWlnaHQoKTogbnVtYmVyO1xuICAgIGNvbnN0cnVjdG9yKHZpZXdQb3J0OiBFbGVtZW50UmVmLCBkb2N1bWVudDogYW55KTtcbiAgICAvKipcbiAgICAgKiBBY3RpdmF0ZSB2aWV3cG9ydCBwb2ludGVyIGV2ZW50cyBzdWNoIGFzICdob3ZlcmVkJyBhbmQgJ2NsaWNrZWQnIGV2ZW50c1xuICAgICAqL1xuICAgIGFjdGl2YXRlUG9pbnRlckV2ZW50cyhwcm9wYWdhdGU6IGJvb2xlYW4sIGRlc3Ryb3llZDogT2JzZXJ2YWJsZTx2b2lkPik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogU2V0IHRoaXMgZGlyZWN0aXZlIGFzIGEgbm9uLWZ1bmN0aW9uYWwgd3JhcHBlciwgY2FsbGVkIHdoZW4gYSBjdXN0b20gdmlld3BvcnQgaXMgdXNlZFxuICAgICAqL1xuICAgIHNldEFzV3JhcHBlcigpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFNldCB0aGlzIGRpcmVjdGl2ZSBhcyAgdGhlIHZpZXdwb3J0LCBjYWxsZWQgd2hlbiBubyBjdXN0b20gdmlld3BvcnQgaXMgdXNlZFxuICAgICAqL1xuICAgIHNldEFzVmlld3BvcnQoY3VzdG9tQ2xhc3NOYW1lOiBzdHJpbmcpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFNjcm9sbCB2aWV3cG9ydCB2ZXJ0aWNhbGx5XG4gICAgICovXG4gICAgc2Nyb2xsWVRvKHZhbHVlOiBudW1iZXIpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFNjcm9sbCB2aWV3cG9ydCBob3Jpem9udGFsbHlcbiAgICAgKi9cbiAgICBzY3JvbGxYVG8odmFsdWU6IG51bWJlcik6IHZvaWQ7XG59XG4iXX0=