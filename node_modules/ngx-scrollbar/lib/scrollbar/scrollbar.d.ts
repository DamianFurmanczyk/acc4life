import { OnDestroy, OnInit, NgZone } from '@angular/core';
import { Platform } from '@angular/cdk/platform';
import { Subject } from 'rxjs';
import { NgScrollbar } from '../ng-scrollbar';
import { ThumbAdapter } from './thumb/thumb';
import { TrackAdapter } from './track/track';
import * as ɵngcc0 from '@angular/core';
export declare abstract class Scrollbar implements OnInit, OnDestroy {
    cmp: NgScrollbar;
    protected platform: Platform;
    protected document: any;
    protected zone: NgZone;
    readonly thumb: ThumbAdapter;
    readonly track: TrackAdapter;
    protected readonly destroyed: Subject<void>;
    /**
     * Viewport pointer events
     * The following streams are only activated when (pointerEventsMethod === 'viewport')
     */
    protected viewportTrackClicked: Subject<any>;
    protected viewportThumbClicked: Subject<any>;
    protected abstract get viewportScrollSize(): number;
    protected constructor(cmp: NgScrollbar, platform: Platform, document: any, zone: NgZone);
    /**
     * Activate scrollbar pointer events
     */
    private activatePointerEvents;
    ngOnInit(): void;
    ngOnDestroy(): void;
    protected abstract setHovered(value: boolean): void;
    protected abstract onUpdated(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Scrollbar, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<Scrollbar, never, never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsYmFyLmQudHMiLCJzb3VyY2VzIjpbInNjcm9sbGJhci5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25EZXN0cm95LCBPbkluaXQsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGxhdGZvcm0gfSBmcm9tICdAYW5ndWxhci9jZGsvcGxhdGZvcm0nO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTmdTY3JvbGxiYXIgfSBmcm9tICcuLi9uZy1zY3JvbGxiYXInO1xuaW1wb3J0IHsgVGh1bWJBZGFwdGVyIH0gZnJvbSAnLi90aHVtYi90aHVtYic7XG5pbXBvcnQgeyBUcmFja0FkYXB0ZXIgfSBmcm9tICcuL3RyYWNrL3RyYWNrJztcbmV4cG9ydCBkZWNsYXJlIGFic3RyYWN0IGNsYXNzIFNjcm9sbGJhciBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgICBjbXA6IE5nU2Nyb2xsYmFyO1xuICAgIHByb3RlY3RlZCBwbGF0Zm9ybTogUGxhdGZvcm07XG4gICAgcHJvdGVjdGVkIGRvY3VtZW50OiBhbnk7XG4gICAgcHJvdGVjdGVkIHpvbmU6IE5nWm9uZTtcbiAgICByZWFkb25seSB0aHVtYjogVGh1bWJBZGFwdGVyO1xuICAgIHJlYWRvbmx5IHRyYWNrOiBUcmFja0FkYXB0ZXI7XG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGRlc3Ryb3llZDogU3ViamVjdDx2b2lkPjtcbiAgICAvKipcbiAgICAgKiBWaWV3cG9ydCBwb2ludGVyIGV2ZW50c1xuICAgICAqIFRoZSBmb2xsb3dpbmcgc3RyZWFtcyBhcmUgb25seSBhY3RpdmF0ZWQgd2hlbiAocG9pbnRlckV2ZW50c01ldGhvZCA9PT0gJ3ZpZXdwb3J0JylcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgdmlld3BvcnRUcmFja0NsaWNrZWQ6IFN1YmplY3Q8YW55PjtcbiAgICBwcm90ZWN0ZWQgdmlld3BvcnRUaHVtYkNsaWNrZWQ6IFN1YmplY3Q8YW55PjtcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgZ2V0IHZpZXdwb3J0U2Nyb2xsU2l6ZSgpOiBudW1iZXI7XG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKGNtcDogTmdTY3JvbGxiYXIsIHBsYXRmb3JtOiBQbGF0Zm9ybSwgZG9jdW1lbnQ6IGFueSwgem9uZTogTmdab25lKTtcbiAgICAvKipcbiAgICAgKiBBY3RpdmF0ZSBzY3JvbGxiYXIgcG9pbnRlciBldmVudHNcbiAgICAgKi9cbiAgICBwcml2YXRlIGFjdGl2YXRlUG9pbnRlckV2ZW50cztcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IHNldEhvdmVyZWQodmFsdWU6IGJvb2xlYW4pOiB2b2lkO1xuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBvblVwZGF0ZWQoKTogdm9pZDtcbn1cbiJdfQ==